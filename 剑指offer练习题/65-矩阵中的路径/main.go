/*
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以
从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如
果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如
a b t g
c f c s
j d e h
矩阵中包含一条字符串"abfd"的路径，但是矩阵中不包含"abcb"路径，因为字符串
的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。
 */
package main


/*
回溯法
首先在矩阵中任选一个各自作为路径的起点。假设矩阵中某个格子的字符为ch，并且这个格子
将对应于路径上的第i个字符。如果路径上的第i个字符不是ch，那么这个格子不可能处在路径上的第i个
位置。如果路径上的第i个字符正好是ch,那么到相邻的格子寻找路径上的第i+1个字符。
除矩阵边界上的格子之外，其他格子都有4个相邻的格子。重复这个过程，直到路径上的所有字符都在
矩阵中找到相应的位置。
由于路径不能重复进入矩阵的格子，所以还需要定义和字符矩阵大小一样的布尔值矩阵，用来
标识路径是否已经进入了每个格子
 */

func hasPaht(martrix [][]byte,rows int, cols int,target string)bool{
	if martrix == nil || rows < 1 || cols <1 || target == ""{
		return false
	}
	visited := make([][]bool,rows)
	for i:=0;i<rows;i++{
		visited[i] = make([]bool,cols)
		for j:=0;j<cols;j++{
			visited[i][j] = false
		}
	}
	pathL
}